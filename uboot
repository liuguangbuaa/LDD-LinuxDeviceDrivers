uboot

nand read des_add, sour_add, len;

详细分析UBOOT中"bootcmd=nand read.jffs2 0x30007FC0 kernel;bootm 0x30007FC0"
   怎么实现nand命令读内核.
 
1.   nand read.jffs2 0x30007FC0 kernel  
步骤a:   从NAND FILSHE中kernel分区读出
步骤b:   放到0x30007FC0去

1.1 kernel分区: 是flash中内核区 
其中在flash中定义了4大分区:
      |   bootloader   |      :一开机直接运行u-boot 
      |boot parameters |      :存放一些可以设置的参数,供u-boot使用
      |      kernel    |      :存放内核区
      |root filesystem |      :根文件系统,挂载(mount)后才能使用文件系统中的应用程序
 
这几个分区通过配置文件已在flash地址上是写好了,位于 u-boot-1.1.6/include/configs/100ask24x0.h：

#define MTDIDS_DEFAULT "nand0=nandflash0"
#define MTDPARTS_DEFAULT "mtdparts=nandflash0:256k@0(bootloader)," \
                            "128k(params)," \
                            "2m(kernel)," \
                            "-(root)"
 
在100ask24x0.h里定义了一个MTDPARTS_DEFAULT宏定义，
“mtdparts=nandflash0:”表示mtdparts分区位于nandflash上
 "256k@0(bootloader),"表示从0开始共256kb是bootloader分区
 "128k(params),"表示接下来128kb用来存放参数，是params分区
 "2m(kernel)," 表示接下来2Mb用来存放内核,是kernel分区
 "-(root)" 表示剩下的容量存放根文件系统,是root分区
 
1.2  可以通过在uboot界面输入"mtd"命令，查看4个分区的位置情况:
#:   name          size               offset           mask_flags
0:bootloader    0X00040000          0X00000000             0
1:params        0X00020000          0X00040000             0
2:kernel        0X00200000          0X00060000             0
3:root          0X0fda0000          0X00260000             0

从上面可以看出bootloader基地址是0x0000 0000,该分区大小为0x0004 000,所以结束地址为0X0003 FFFF。
为什么0X00040000等于256kb?
因为在ARM920t中,每隔4个地址保存了一个32位数据(4个字节)
所以0X00040000=0X00040000个字节=0x100(256)*0x400(1024)=256Kb

1.3  所以 nand read.jffs2 0x30007FC0 kernel 最终扩展开为：
  nand read.jffs2 0x30007FC0 0X00060000  0X00200000
  
  
load zImage, dtb, and rootfs to RAM

set bootargs for linux

bootz zImage_addr rootfs_addr dtb_addr, if don't need rootfs, please put "-"

boot from emmc(ext4 format), emmc partition 2 exist rootfs.

The U-Boot Documentation — Das U-Boot unknown version documentation
uboot > mmc rescan;
uboot > ext4load mmc 0:2 0x10000000 /boot/zImage;
uboot > ext4load mmc 0:2 0x11000000 /boot/uboot-board-C.dtb
uboot > setenv bootargs "console=ttyPS0,115200 earlyprintk root=/dev/mmcblk0p2 rw" 
uboot > bootz 0x10000000 - 0x11000000

boot from SD card (fat32 format), the rootfs isn't exist.
uboot > mmc rescan; 
uboot > fatload mmc 0 0x10000000 zImage;
uboot > fatload mmc 0 0x11000000 uboot-board-C.dtb
uboot > fatload mmc 0 0x12000000 u-rootfs
uboot > setenv bootargs "console=ttyPS0,115200 earlyprintk " 
uboot > bootz 0x10000000 0x12000000 0x11000000

boot from qspi, the rootfs isn't exist.
uboot > sf probe
uboot > sf read 0x10000000 <zImage_addr> <zImage_size>
uboot > sf read 0x11000000 <dtb_addr> <dtb_size>
uboot > sf read 0x12000000 <rootfs_addr> <rootfs_size>
uboot > bootz 0x10000000 0x12000000 0x11000000

boot from nand flash, the rootfs isn't exist.
uboot > nand read 0x10000000 <zImage_addr> <zImage_size>
uboot > nand read 0x11000000 <dtb_addr> <dtb_size>
uboot > nand read 0x12000000 <rootfs_addr> <rootfs_size>
uboot > bootz 0x10000000 0x12000000 0x11000000

boot from nor flash, the rootfs isn't exist.
uboot > cp.b <zImage_addr> 0x10000000 <zImage_size>
uboot > cp.b <dtb_addr> 0x11000000 <dtb_size>
uboot > cp.b <rootfs_addr> 0x12000000 <rootfs_size>
uboot > bootz 0x10000000 0x12000000 0x11000000
————————————————



bootargs中的常见项目
root =
所学的课程中，root的情形如下：
（1）如果在nandflash上，则root=/dev/mtdblock2；
（2）如果在inand/sd上，则root=/dev/mmcblk0p2（设备0的第二分区））。
（3）如果是nfs，则root=/dev/nfs。此情形还需要指定nfsroot=serverip:nfs_dir，即指明文件系统存在哪个主机的哪个目录下面。

rootfstype=
这个项目表示根文件系统的文件系统类型，需要与root配合使用。
根文件系统的类型一般有jffs2、yaffs2、ext2、ext3、ubi等等。
如果ext2文件系统，有没有这个选项是无所谓的，但如果是jffs2、squashfs等文件系统，就需要rootfstype指明文件系统的类型，不然会无法挂载根分区

initrd=, noinitrd
当没有使用ramdisk启动系统的时候，需要使用noinitrd这个项目。
如果使用了，就需要指定“ initrd=r_addr,size ”。其中r_addr表示initrd在内存中的位置，size表示initrd的大小

init=


mtdparts=fc000000.nor_flash:1920k(linux),128k(fdt),20M(ramdisk),4M(jffs2),38272k(user),256k(env),384k(uboot)

Device Drivers  --->
     Memory Technology Device (MTD) support  ---> 
            Command line partition table parsing
			
			
			bootargs常用的几种组合
1、假设文件系统是ramdisk，且直接就在内存中，bootargs的设置应该如下：
setenv bootargs ‘initrd=0x32000000,0xa00000 root=/dev/ram0 console=ttySAC0 mem=64M init=/linuxrc’

2、假设文件系统是ramdisk，且在flash中，bootargs的设置应该如下：
setenv bootargs ‘mem=32M console=ttyS0,115200 root=/dev/ram rw init=/linuxrc’
注意这种情况下你应该要在bootm命令中指定ramdisk在flash中的地址，如bootm kernel_addr ramdisk_addr (fdt_addr)

3、假设文件系统是jffs2类型的，且在flash中，bootargs的设置应该如下：
setenv bootargs ‘mem=32M console=ttyS0,115200 noinitrd root=/dev/mtdblock2 rw rootfstype=jffs2 init=/linuxrc’

4、假设文件系统是基于nfs的，bootargs的设置应该如下：
setenv bootargs ‘noinitrd mem=64M console=ttySAC0 root=/dev/nfs nfsroot=192.168.0.3:/nfs ip=192.168.0.5:192.168.0.3:192.168.0.3:255.255.255.0::eth0:off’
或者
setenv bootargs 'noinitrd mem=64M console=ttySAC0 root=/dev/nfs nfsroot=192.168.0.3:/nfs ip=192.168.0.5'

5、rootfs在SD/iNand/Nand/Nor等物理存储器上。这种对应产品正式出货工作时的情况。
setenv bootargs 'console=ttySAC2,115200 root=/dev/mmcblk0p2 rw init=/linuxrc rootfstype=ext3'

6、rootfs在nfs上，这种对应我们实验室开发产品做调试的时候。
setenv bootargs 'root=/dev/nfs nfsroot=192.168.1.100:/root/rootfs/ ip=192.168.1.20:192.168.1.100:192.168.1.1:255.255.


NFS
bootargs=noinitrd root=/dev/nfs rw nfsroot=192.168.0.1:/home/tekkaman/working/nfs/rootfs ip=192.168.0.2:192.168.0.1::255.255.255.0 console=ttySAC0,115200 init=/linuxrc mem=64M

bootcmd=nfs 0x30008000 192.168.0.1:/home/tekkaman/working/nfs/zImage.img;bootm

RAMDISK
bootargs= initrd=0x32000000,0x200000 root=/dev/ram rw console=ttySAC0 mem=64M
bootcmd= nand write 0x31000000 0x100000 0x400000\; nand write 0x32000000 0x700000 0x200000 \; bootm 0x31000000

0x32000000 根文件系统ramdisk.gz拷贝到内存中的位置
0x31000000 内核被考到内存中的位置
0x100000 内核在NANDFLASH中的位置
0x400000 内核的大小
0x700000 根文件系统在NANDFLASH中的位置
0x200000 根文件系统的大小

TFTP
bootcmd= "tftp 0x32000000 uImage; bootm 0x32000000"
bootargs="noinitrd root=/dev/mtdblock2 init=/linuxrc console=ttySAC0"

mmc上装载内核并启动（uboot要支持sd卡）
bootcmd="mmc init\; fatload mmc 1 0x30008000 zImage.img\;bootm

bootcmd="usb start \; fatload usb 0:4 0x30008000 zImage\;bootm




struct device {
    // ...
    spinlock_t    devres_lock;
    struct list_head   devres_head;
    //...
} 

struct devres {
    struct devres_node    node;
    /* -- 3 pointers */
    unsigned long long    data[]; /* guarantee ull alignment */
};

struct devres_node {
    struct list_head        entry;
    dr_release_t            release;
#ifdef CONFIG_DEBUG_DEVRES
    const char          *name;
    size_t              size;
#endif
};

list_add_tail(&node->entry, &dev->devres_head);

#define offset(TYPE, MEMBER) ((size_t) &((TYPE*)0)->MEMBER)
#define container_of(ptr, type, member) ({ \
const typedef (((type*)0)->member) *_mptr = ptr;
(type*) ((char*)_mptr - offset(type,number));})



boot更改

copy configs/XXX_deconfig 编译选项 CONFIG_IMX_CONFIG="board/philips/mx6evomon/imximage.cfg"

copy include/configs/XXX.h 配置选项
copy board/freescale/XXX_board/Kconfig

arch/arm/mach-imx/mx6/Kconfig
